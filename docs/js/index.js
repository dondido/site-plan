import{Drag}from"./gestures.js";import{setTransform}from"./utils.js";let plan,modalTemplate,optionTemplate,drag,$scene,$activeOption;const handleJson=e=>e.json(),handleText=e=>e.text(),$port=document.querySelector(".port"),$view=document.querySelector(".view"),$zoomSlider=document.querySelector(".zoom-slider"),$zoomControl=document.querySelector(".zoom-control"),$modal=document.querySelector(".modal"),$modalBody=document.querySelector(".modal-body"),$optionPanel=document.querySelector(".options-panel"),$optionsButton=document.querySelector(".options-button"),setModalTemplate=e=>modalTemplate=e,setOptionTemplate=e=>optionTemplate=e,interpolate=(e,[t,o])=>e.replace(new RegExp(t.toUpperCase(),"g"),o),zoom=()=>{$view.dataset.z=1+$zoomSlider.value/plan.zoomRatio,$zoomControl.dataset.z=+$zoomSlider.value+100,$view.style.setProperty("--rz",$view.dataset.sx/$view.dataset.z),setTransform($view)},wheel=({deltaY:e})=>{$zoomSlider.value=+$zoomSlider.value+(e>0?-4:4),zoom()},init=()=>{setScale(),drag.attach()},reset=()=>{$view.dataset.x=$view.dataset.y=$zoomSlider.value=0,zoom()},setScale=()=>{if(void 0===$view.dataset.sx){const{width:e,height:t}=$scene.getBoundingClientRect(),o=Math.min(window.innerWidth/e,window.innerHeight/t);$view.dataset.sy=o,$view.dataset.sx=o,setTransform($view)}},clickBuilding=(e,t)=>{const{buildings:o,palettes:n}=plan,l=document.elementsFromPoint(e,t),i=o.find((e=>l.some((t=>e.selector===t.id))));if(i){const{state:e}=i,t=n.find((({key:t})=>t===e));t&&(i.homestyle=t.color,i.stage=t.name,$modalBody.innerHTML=Object.entries(i).reduce(interpolate,modalTemplate),$modal.classList.add("opened"))}},insertView=e=>{const{buildings:t,palettes:o}=plan,n=e=>o.find((({key:t})=>t===e))?.color,l=({selector:e,state:t})=>{const o=$scene.getElementById(e);return o.classList.add("building"),o.setAttribute("style","fill: "+n(t)),o};$view.innerHTML=e,$scene=$view.firstElementChild,drag=new Drag({$zoomSlider:$zoomSlider,zoom:zoom,clickBuilding:clickBuilding}),setScale(),drag.attach();const i=t.map(l);$optionPanel.innerHTML=o.reduce(((e,{key:t,name:o,color:n})=>`${e}${[["guid",t],["stage",o],["homestyle",n]].reduce(interpolate,optionTemplate)}`),""),Array.from($optionPanel.querySelectorAll(".button-switch")).forEach((e=>{e.onclick=({target:e})=>{const{id:o}=e,a=e=>{const l=t.findIndex((({selector:t})=>t===e.id)),i=t[l].state===o?n(o):"rgba(255, 255, 255, .3)";e.setAttribute("style","fill: "+i)};$activeOption&&!1===$activeOption.isSameNode(e)&&$activeOption.setAttribute("aria-checked",!1);const r="false"===e.getAttribute("aria-checked");e.setAttribute("aria-checked",r),r?(i.forEach(a),$activeOption=e):t.forEach(l)}})),$zoomSlider.oninput=zoom,$port.onwheel=wheel},handlePlan=e=>{plan=e,document.querySelector(".plan-name").textContent=plan.name},sitePromise=fetch("floors/plan.svg").then(handleText),optionPromise=fetch("option.html").then(handleText).then(setOptionTemplate),modalPromise=fetch("modal.html").then(handleText).then(setModalTemplate),planPromise=fetch("plan.json").then(handleJson).then(handlePlan);Promise.all([sitePromise,planPromise,optionPromise,modalPromise]).then((([e])=>insertView(e))),$optionsButton.onclick=()=>$optionPanel.toggleAttribute("hidden"),document.querySelector(".modal-close-button").onclick=()=>$modal.classList.remove("opened"),document.querySelector(".print-button").onclick=()=>window.print(),document.querySelector(".reset-button").onclick=reset;export default()=>({planPromise:planPromise});