import{setTransform}from"./utils.js";export class Drag{constructor(t){Object.assign(this,t)}attach(){document.body.onpointerdown=this.pointerdown,document.body.onpointerup=this.pointerup,document.body.onpointercancel=this.pointerup}pointers=[];initialZoom=0;pointerup=({clientX:t,clientY:i})=>{!0!==this.notAClick&&this.pointers.length&&this.clickBuilding(t,i),this.pointers=[],document.body.onpointermove=null,this.notAClick=this.hypo=this.x2=this.y2=0,clearTimeout(this.clickTime)};preventClick=()=>this.notAClick=!0;pointerdown=t=>{if(["INPUT","BUTTON","A"].includes(t.target.tagName))return;const i=t.target.closest("[data-drag-area]");if(0===this.pointers.length&&i){this.$area=i.dataset.dragArea?t.target.closest(i.dataset.dragArea):{dataset:{}};const e=t.target.closest(".draggable");this.$target=e;const{x:s=0,y:o=0}=e.dataset,{clientX:n,clientY:h}=t;this.x1=n-s,this.y1=h-o,this.initialZoom=+this.$zoomSlider.value,document.body.onpointermove=this.pointermove,this.clickTime=setTimeout(this.preventClick,600)}this.pointers.push(t)};pointermove=t=>{t.preventDefault();const[i,e,s]=this.pointers,{$target:o}=this;if(s)return;if(e&&o.classList.contains("pinchable")){let s;t.pointerId===i.pointerId?(s=e,this.pointers[0]=t):(s=i,this.pointers[1]=t);const o=Math.hypot(s.clientX-t.clientX,s.clientY-t.clientY);return this.hypo=this.hypo||o,this.$zoomSlider.value=this.initialZoom+100*Math.min(1,o/this.hypo-1),this.zoom()}const{clientX:n,clientY:h}=t;this.x2=this.x1-n,this.y2=this.y1-h,o.dataset.x=-this.x2,o.dataset.y=-this.y2,setTransform(o),(Math.abs(this.x2)>2||Math.abs(this.y2)>2)&&(this.notAClick=!0)}}